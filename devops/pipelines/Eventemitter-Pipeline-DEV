pipeline {

    agent any

    options {
        // persist artifacts and console output for the specific number of recent Pipeline runs
        buildDiscarder(logRotator(numToKeepStr:'10'))
        // skip checking out code from source control by default in the agent directive
        skipDefaultCheckout()
        // disallow concurrent executions of the Pipeline
        disableConcurrentBuilds()
        // make sure that this build doesn't hang forever
        timeout(time: 60, unit: 'MINUTES')
        // prepend all console output generated by the Pipeline run with the time at which the line was emitted
        timestamps()
        // skip stages once the build status has gone to UNSTABLE
        //skipStagesAfterUnstable
        // on failure, retry the entire Pipeline the specified number of times
        //retry(3)
        ansiColor('xterm')
    }

    environment {
        ANSIBLE = tool name: 'ansible25', type: 'org.jenkinsci.plugins.ansible.AnsibleInstallation'
        PATH = "$PATH:$ANSIBLE/bin"
        PYTHONPATH = "$ANSIBLE/lib"
        ANSIBLE_LIBRARY = "$ANSIBLE/library"
    }

    tools {
        nodejs 'nodejs9'
    }

    parameters {
        string(defaultValue: "dev", description: 'Repository branch', name: 'BRANCH')
    }

    stages {

        stage("Checkout code") {
            steps {

                // slackSend (
                //     color: '#FFFF00',
                //     teamDomain: 'ioxlab',
                //     tokenCredentialId: 'slack_notifications',
                //     channel: "#currenta_notification",
                //     message: "STARTED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})"
                // )

                // hipchatSend (
                //     color: 'YELLOW',
                //     notify: true,
                //     message: "STARTED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})",
                //     room: 'Currenta',
                //     sendAs: 'Jenkins',
                //     v2enabled: false
                // )

                // emailext (
                //     to: 'sergey.baranov@instinctools.ru',
                //     subject: "STARTED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'",
                //     body: """<p>STARTED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]':</p>
                //       <p>Check console output at &QUOT;<a href='${env.BUILD_URL}'>${env.JOB_NAME} [${env.BUILD_NUMBER}]</a>&QUOT;</p>""",
                //     recipientProviders: [[$class: 'DevelopersRecipientProvider']]
                // )

                // Wipe out the workspace before start
                deleteDir()

                // Checkout project repo
                checkout([
                    $class                           : 'GitSCM',
                    branches                         : [[name: "${params.BRANCH}"]],
                    doGenerateSubmoduleConfigurations: false,
                    extensions                       : [],
                    submoduleCfg                     : [],
                    userRemoteConfigs                : [[
                        credentialsId: 'eventemitter-github',
                        url: 'git@github.com:inst-event-emitter/eventemitter-backend.git'
                    ]]
                ])
            }
        }

        stage('Server: install dependencies') {
            steps {
                sh 'node -v && yarn --version && yarn'
            }
        }


        stage('Server: tests') {
            steps {
                sh 'yarn test:unit'
            }
        }

        stage ("Server: deploy to staging") {
            steps {
                dir ('devops/ansible') {
                    sshagent (credentials: ['ssh_deploy']) {
                        sh 'ansible --version && ansible-playbook -i environments/dev/inventory backend.yml -e \"src=${WORKSPACE}\"'
                    }
                }
            }
        }

    }

    // post {

    //     success {
    //         // hipchatSend (
    //         //     color: 'GREEN',
    //         //     notify: true,
    //         //     message: "SUCCESSFUL: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})",
    //         //     room: 'Currenta',
    //         //     sendAs: 'Jenkins',
    //         //     v2enabled: false
    //         // )

    //         // slackSend (
    //         //     color: '#00FF00',
    //         //     teamDomain: 'ioxlab',
    //         //     tokenCredentialId: 'slack_notifications',
    //         //     channel: "#currenta_notification",
    //         //     message: "SUCCESSFUL: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})"
    //         // )

    //         // emailext (
    //         //     to: 'sergey.baranov@instinctools.ru',
    //         //     subject: "SUCCESSFUL: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'",
    //         //     body: """<p>SUCCESSFUL: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]':</p>
    //         //       <p>Check console output at &QUOT;<a href='${env.BUILD_URL}'>${env.JOB_NAME} [${env.BUILD_NUMBER}]</a>&QUOT;</p>""",
    //         //     recipientProviders: [[$class: 'DevelopersRecipientProvider']]
    //         // )
    //     }

    //     failure {
    //         // hipchatSend (
    //         //     color: 'RED',
    //         //     notify: true,
    //         //     message: "FAILED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})",
    //         //     room: 'Currenta',
    //         //     sendAs: 'Jenkins',
    //         //     v2enabled: false
    //         // )

    //         // slackSend (
    //         //     color: '#FF0000',
    //         //     teamDomain: 'ioxlab',
    //         //     tokenCredentialId: 'slack_notifications',
    //         //     channel: "#currenta_notification",
    //         //     message: "FAILED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})"
    //         // )

    //         // emailext (
    //         //     to: 'sergey.baranov@instinctools.ru',
    //         //     subject: "FAILED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'",
    //         //     body: """<p>FAILED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]':</p>
    //         //       <p>Check console output at &QUOT;<a href='${env.BUILD_URL}'>${env.JOB_NAME} [${env.BUILD_NUMBER}]</a>&QUOT;</p>""",
    //         //     recipientProviders: [[$class: 'DevelopersRecipientProvider']]
    //         // )
    //     }
    // }
}
